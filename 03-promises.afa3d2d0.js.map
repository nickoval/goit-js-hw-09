{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAiGA,SAASC,EAAUC,EAAUC,GAAgBC,EAAAL,GAASM,OAAOC,QAC3D,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,OAEhDK,QAAQC,IAAI,uBAAwCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,CAI1D,SAASO,EAASR,EAAUC,GAC1BC,EAAAL,GAASM,OAAOM,QACd,sBAAuCJ,OAAfL,EAAS,QAAYK,OAANJ,EAAM,OAE/CK,QAAQC,IAAI,sBAAuCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,EA1G9C,CAIXS,KAAOC,SAASC,cAAc,WAiB3BF,KAAKG,iBAAiB,UAE3B,SAAkBC,G,kBAUd,IAAMb,EAAQc,EAAaC,EAAEC,EAMb,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACaC,KAAKC,SAAW,GAEpCxB,IAGAS,G,GAEDP,E,IAGGuB,MAEN,SAAAC,GACE1B,EAAUC,SAAUC,E,IAGtB,SAAAyB,GACElB,EAASR,SAAUC,E,KAlCzBa,EAAIa,iBACJ,IAAMZ,EAAaa,OAAOd,EAAIe,cAAcC,SAAS7B,MAAMwB,OAC3DnB,QAAQC,IAAI,UAAUQ,GACtB,IAAME,EAAOW,OAAOd,EAAIe,cAAcC,SAASb,KAAKQ,OACpDnB,QAAQC,IAAI,SAASU,GACrB,IAAMc,EAASH,OAAOd,EAAIe,cAAcC,SAASC,OAAON,OACxDnB,QAAQC,IAAI,WAAWwB,GAEvB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IAAGC,EAAAD,E,IAgCjC1B,QAAQC,IAAI,oC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  // delay : document.querySelector('[name=\"delay\"]'),\n  // step : document.querySelector('[name=\"step\"]'),\n  // amount : document.querySelector('[name=\"amount\"]'),\n  form : document.querySelector('.form')\n}\n\n// refs.delay.addEventListener('', ()=>{} );\n// refs.step.addEventListener('', ()=>{} );\n// refs.amount.addEventListener('', ()=>{} );\n\n// refs.form.addEventListener('submit', (evt)=>{\n//   evt.preventDefault();\n//   const delay = evt.currentTarget.elements.delay.value;\n//   console.log('delay: ',delay);\n//   const step = evt.currentTarget.elements.step.value;\n//   console.log('step: ',step);\n//   const amount = evt.currentTarget.elements.amount.value;\n//   console.log('amount: ',amount);\n// } );\n\nrefs.form.addEventListener('submit', onSubmit );\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  const startDelay = Number(evt.currentTarget.elements.delay.value);\n  console.log('delay: ',startDelay);\n  const step = Number(evt.currentTarget.elements.step.value);\n  console.log('step: ',step);\n  const amount = Number(evt.currentTarget.elements.amount.value);\n  console.log('amount: ',amount);\n\n  for (let i = 0; i < amount; i++) {\n    const delay = startDelay + i*step\n\n    // runPromise(i, delay);\n    // initPromise(i, delay);\n\n\n    const promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          onFulfill();\n  \n        } else {\n          onReject();\n        }\n      }, delay);\n    });\n\n    promise.then(\n      // onResolve will run third or not at all\n      value => {\n        onFulfill(position, delay)\n      },\n      // onReject will run third or not at all\n      error => {\n        onReject(position, delay)\n      }\n    );\n    \n  }\n}\nconsole.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\n\n// function runPromise(position, delay) {\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         onFulfill();\n\n//       } else {\n//         onReject();\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\n\n\n  // promise.then(\n  //   // onResolve will run third or not at all\n  //   value => {\n  //     onFulfill(position, delay)\n  //   },\n  //   // onReject will run third or not at all\n  //   error => {\n  //     onReject(position, delay)\n  //   }\n  // );\n\n// initPromise(onFulfill, onReject);\n\nfunction onFulfill(position, delay) {        Notiflix.Notify.success(\n  `✅ Fulfilled promise ${position} in ${delay}ms`\n);\nconsole.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  \n}\n\nfunction onReject(position, delay) {\n  Notiflix.Notify.failure(\n    `❌ Rejected promise ${position} in ${delay}ms`\n  );\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\n// function runPromise(position, delay) {\n//   console.log('position: ', position);\n//   console.log('delay: ',delay);\n//   // return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n//   // });\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$onFulfill","position","delay","$parcel$interopDefault","Notify","success","concat","console","log","$ce04d3a99e08e73b$var$onReject","failure","form","document","querySelector","addEventListener","evt","startDelay","i","step","Promise","resolve","reject","setTimeout","Math","random","then","value","error","preventDefault","Number","currentTarget","elements","amount","i1","_loop"],"version":3,"file":"03-promises.afa3d2d0.js.map"}