{"mappings":"sEACAA,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQE,QACR,SAAyBC,EAAUC,GAC/B,KAAMD,aAAoBC,GACtB,MAAM,IAAIC,UAAU,oC,WCG5B,SAASC,EAAkBC,EAAQC,GAC/B,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAI,CACjC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDhB,OAAOC,eAAeQ,EAAQI,EAAWI,IAAKJ,E,EAftDb,OAAOC,eAAeiB,EAAS,aAAc,CACzCf,OAAO,IAEXe,EAAQd,QACR,SAAsBE,EAAaa,EAAYC,GACvCD,GAAYX,EAAkBF,EAAYe,UAAWF,GACrDC,GAAaZ,EAAkBF,EAAac,GAChD,OAAOd,C,EC2IX,IAAMgB,EAAO,CACXC,SAAUC,SAASC,cAAc,gBACjCC,QAASF,SAASC,cAAc,eAChCE,KAAMH,SAASC,cAAc,SAqCzBG,EAAW,IAAd,W,sBAjCGC,EACQC,G,IAAAC,EAAAD,EAAEC,O,aACZC,KAAKC,QAAU,KACfD,KAAKE,WAAY,EACjBF,KAAKD,OAASA,C,iBAGhBd,IAAA,U,MAAA,W,WACMe,KAAKE,YAGTC,QAAQC,IAAI,YACZJ,KAAKE,WAAY,EACjBF,KAAKC,QAAUI,aAAY,WACzB,IAAIC,EAAQC,EAAKC,oBACjBL,QAAQC,IAAI,cAAeE,GAC3BC,EAAKR,OAAOO,E,GAlBI,KAoBlBH,QAAQC,IAAI,iBAAkBJ,KAAKC,S,IAGrChB,IAAA,S,MAAA,WACEkB,QAAQC,IAAI,WACZD,QAAQC,IAAI,iBAAkBJ,KAAKC,SACnCQ,cAAcT,KAAKC,SACnBD,KAAKE,WAAY,C,IAGnBjB,IAAA,oB,MAAA,WACE,MAAO,IAAsDyB,OAAlDC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,I,OAI1D,GAAc,CAAa,CAAEf,OAKhC,SAAyBgB,GACvBzB,EAAKK,KAAKqB,MAAMC,gBAAkBF,C,IAJpCzB,EAAKC,SAAS2B,iBAAiB,QAAStB,EAASuB,QAAQC,KAAKxB,IAC9DN,EAAKI,QAAQwB,iBAAiB,QAAStB,EAASyB,OAAOD,KAAKxB,G","sources":["node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/01-color-switcher.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","// Только глобальные переменные и функции\n// ------------------------------------------------------------------------------------------\n// const refs = {\n//   buttonStart: document.querySelector('[data-start]'),\n//   buttonStop: document.querySelector('[data-stop]'),\n//   body: document.querySelector('body'),\n// };\n// const TIME_INTERVAL = 1000;\n// let timerID = null;\n// let isWorking = false;\n\n// refs.buttonStart.addEventListener('click', onStart);\n// refs.buttonStop.addEventListener('click', onStop);\n\n// function getRandomHexColor() {\n//   return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n// }\n\n// function onStart() {\n//   if (isWorking) {\n//     return;\n//   }\n//   console.log('Start!!!');\n//   isWorking = true;\n//   timerID = setInterval(() => {\n//     let bodyColor = getRandomHexColor();\n//     console.log('bodyColor: ', bodyColor);\n//     refs.body.style.backgroundColor = bodyColor;\n//   }, TIME_INTERVAL);\n// }\n\n// function onStop() {\n//   console.log('Stop!!!');\n//   isWorking = false;\n//   clearInterval(timerID);\n// }\n// =======================================================================================\n\n// С использованием Объекта\n// ---------------------------------------------------------------------------------------\n// const refs = {\n//   btnStart: document.querySelector('[data-start]'),\n//   btnStop: document.querySelector('[data-stop]'),\n//   body: document.querySelector('body'),\n// };\n// const TIME_INTERVAL = 1000;\n\n// const switcher = {\n//   timerID: null,\n//   isWorking: false,\n\n//   onStart() {\n//     if (this.isWorking) {\n//       return;\n//     }\n//     console.log('Start!!!');\n//     this.isWorking = true;\n//     this.timerID = setInterval(() => {\n//       let color = getRandomHexColor();\n//       console.log('bodyColor: ', color);\n//       updateBodyStyle(color);\n//     }, TIME_INTERVAL);\n//     console.log('this.timerID: ', this.timerID);\n//   },\n\n//   onStop() {\n//     console.log('Stop!!!');\n//     console.log('this.timerID: ', this.timerID);\n//     clearInterval(this.timerID);\n//     this.isWorking = false;\n//   },\n// };\n\n// function updateBodyStyle(bodyColor) {\n//   refs.body.style.backgroundColor = bodyColor;\n// }\n\n// // или\n// refs.btnStart.addEventListener('click', () => {\n//   switcher.onStart();\n// });\n// refs.btnStop.addEventListener('click', () => {\n//   switcher.onStop();\n// });\n// // или\n// // refs.btnStart.addEventListener('click', switcher.onStart.bind(this));\n// // refs.btnStop.addEventListener('click', switcher.onStop.bind(this));\n\n// function getRandomHexColor() {\n//   return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n// }\n// ===================================================================================\n\n// С использованием Класса (ООП)\n// ---------------------------------------------------------------------------------------\n// const refs = {\n//   btnStart: document.querySelector('[data-start]'),\n//   btnStop: document.querySelector('[data-stop]'),\n//   body: document.querySelector('body'),\n// };\n// const TIME_INTERVAL = 1000;\n\n// class Switcher {\n//   constructor() {\n//     this.timerID = null;\n//     this.isWorking = false;\n//     // this.onStep() = updateBodyStyle();\n//   }\n\n//   onStart() {\n//     if (this.isWorking) {\n//       return;\n//     }\n//     console.log('Start!!!');\n//     this.isWorking = true;\n//     this.timerID = setInterval(() => {\n//       let color = this.getRandomHexColor();\n//       console.log('bodyColor: ', color);\n//       updateBodyStyle(color);\n//     }, TIME_INTERVAL);\n//     console.log('this.timerID: ', this.timerID);\n//   }\n\n//   onStop() {\n//     console.log('Stop!!!');\n//     console.log('this.timerID: ', this.timerID);\n//     clearInterval(this.timerID);\n//     this.isWorking = false;\n//   }\n\n//   getRandomHexColor() {\n//     return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n//   }\n// }\n\n// const switcher = new Switcher();\n\n// refs.btnStart.addEventListener('click', switcher.onStart.bind(switcher));\n// refs.btnStop.addEventListener('click', switcher.onStop.bind(switcher));\n\n// function updateBodyStyle(bodyColor) {\n//   refs.body.style.backgroundColor = bodyColor;\n// }\n// ===================================================================================\n\n// Kласс независящий от имен внешних функций (как у Репеты)\n//-----------------------------------------------------------------------------------\nconst refs = {\n  btnStart: document.querySelector('[data-start]'),\n  btnStop: document.querySelector('[data-stop]'),\n  body: document.querySelector('body'),\n};\nconst TIME_INTERVAL = 1000;\n\nclass Switcher {\n  constructor({ onTick }) {\n    this.timerID = null;\n    this.isWorking = false;\n    this.onTick = onTick;\n  }\n\n  onStart() {\n    if (this.isWorking) {\n      return;\n    }\n    console.log('Start!!!');\n    this.isWorking = true;\n    this.timerID = setInterval(() => {\n      let color = this.getRandomHexColor();\n      console.log('bodyColor: ', color);\n      this.onTick(color);\n    }, TIME_INTERVAL);\n    console.log('this.timerID: ', this.timerID);\n  }\n\n  onStop() {\n    console.log('Stop!!!');\n    console.log('this.timerID: ', this.timerID);\n    clearInterval(this.timerID);\n    this.isWorking = false;\n  }\n\n  getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  }\n}\n\nconst switcher = new Switcher({ onTick: updateBodyStyle });\n\nrefs.btnStart.addEventListener('click', switcher.onStart.bind(switcher));\nrefs.btnStop.addEventListener('click', switcher.onStop.bind(switcher));\n\nfunction updateBodyStyle(bodyColor) {\n  refs.body.style.backgroundColor = bodyColor;\n}\n"],"names":["Object","defineProperty","$665014edacbfe17b$exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$2ec2bf6e450c0fe9$var$refs","btnStart","document","querySelector","btnStop","body","$2ec2bf6e450c0fe9$var$switcher","Switcher","param","onTick","this","timerID","isWorking","console","log","setInterval","color","_this","getRandomHexColor","clearInterval","concat","Math","floor","random","toString","bodyColor","style","backgroundColor","addEventListener","onStart","bind","onStop"],"version":3,"file":"01-color-switcher.a1e570a6.js.map"}