{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAyGA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIb,SAASO,GAAUR,SAAEA,EAAQC,MAAEA,IAC7BQ,EAAAZ,GAASa,OAAOC,QAAQ,uBAAqBX,QAAiBC,OAC5DW,QAAMC,IAAI,uBAAqBb,QAAiBC,M,CAGpD,SAASa,GAASd,SAAEA,EAAQC,MAAEA,IAC5BQ,EAAAZ,GAASa,OAAOK,QAAQ,sBAAoBf,QAAiBC,OAC3DW,QAAMC,IAAI,sBAAoBb,QAAeC,M,EA3HpC,CAIXe,KAAMC,SAASC,cAAc,WAa1BF,KAAKG,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAIC,iBAEJ,MAAMC,EAAaC,OAAOH,EAAII,cAAcC,SAASxB,MAAMyB,OACrDC,EAAOJ,OAAOH,EAAII,cAAcC,SAASE,KAAKD,OAC9CE,EAASL,OAAOH,EAAII,cAAcC,SAASG,OAAOF,QAwE1D,SAAwBJ,EAAYK,EAAMC,GACxC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAE/B9B,EAAc8B,EADFP,EAAaO,EAAIF,GACLG,KAAKtB,GAAWuB,MAAMjB,E,EA/DrCkB,CAAIV,EAAYK,EAAMC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  // delay : document.querySelector('[name=\"delay\"]'),\n  // step : document.querySelector('[name=\"step\"]'),\n  // amount : document.querySelector('[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\n// refs.form.addEventListener('submit', (evt)=>{\n//   evt.preventDefault();\n//   const delay = evt.currentTarget.elements.delay.value;\n//   console.log('delay: ',delay);\n//   const step = evt.currentTarget.elements.step.value;\n//   console.log('step: ',step);\n//   const amount = evt.currentTarget.elements.amount.value;\n//   console.log('amount: ',amount);\n// } );\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n\n  const startDelay = Number(evt.currentTarget.elements.delay.value);\n  const step = Number(evt.currentTarget.elements.step.value);\n  const amount = Number(evt.currentTarget.elements.amount.value);\n\n  // Для варианта 1\n  // for (let i = 0; i < amount; i++) {\n  //   const delay = startDelay + i * step;\n  //   runPromise(i, delay);\n  // }\n\n  // Для варианта 2\n  // initPromise(startDelay, step, amount);\n\n  // Для варианта 3\n  promiseCounter(startDelay, step, amount);\n}\n\n// Работает без всяких промисов (вариант 1)\n// --------------------------------------------------------------\n// function runPromise(position, delay) {\n//   console.log('position: ', position);\n//   console.log('delay: ', delay);\n//   setTimeout(() => {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     } else {\n//       Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//     }\n//   }, delay);\n// }\n// ==================================================================================\n\n// Одна большая функция со сетчиком и промисом (вариант 2) (!!!Не передаются данные под вывод!!!)\n// -----------------------------------------------------------------------------\n// function initPromise(startDelay, step, amount) {\n//   for (let i = 0; i < amount; i++) {\n//     const delay = startDelay + i * step;\n\n//     const promise = new Promise((resolve, reject) => {\n//       setTimeout(() => {\n//         const shouldResolve = Math.random() > 0.3;\n//         if (shouldResolve) {\n//           onFulfill();\n//         } else {\n//           onReject();\n//         }\n//       }, delay);\n//     });\n\n//     promise.then(\n//       value => {\n//         onFulfill(position, delay);\n//       },\n//       error => {\n//         onReject(position, delay);\n//       }\n//     );\n//   }\n// }\n\n// function onFulfill(position, delay) {\n//   Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// }\n\n// function onReject(position, delay) {\n//   Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n// }\n// ====================================================================================\n\n// Вариант 3 Немного похож на Репетовский (функции разделены, аргументы передаются из функции в функцию)\n// -------------------------------------------------------------------------------------\nfunction promiseCounter(startDelay, step, amount) {\n  for (let i = 0; i < amount; i++) {\n    let delay = startDelay + i * step;\n    createPromise(i, delay).then(onFulfill).catch(onReject);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onFulfill({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onReject({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n// ====================================================================================\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$onFulfill","$parcel$interopDefault","Notify","success","console","log","$47d4ff9957288465$var$onReject","failure","form","document","querySelector","addEventListener","evt","preventDefault","startDelay","Number","currentTarget","elements","value","step","amount","i","then","catch","$47d4ff9957288465$var$promiseCounter"],"version":3,"file":"03-promises.2436692a.js.map"}